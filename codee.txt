# reading the CSV file
def config(filename='database.ini', section='postgresql'):
    # create a parser
    parser = ConfigParser()
    # read config file
    parser.read(filename)

    # get section, default to postgresql
    db = {}
    if parser.has_section(section):
        params = parser.items(section)
        for param in params:
            db[param[0]] = param[1]
    else:
        raise Exception('Section {0} not found in the {1} file'.format(section, filename))

    return db
    
    def connect():
    """ Connect to the PostgreSQL database server """
    conn = None
    try:
        # read connection parameters
        params = config()

        # connect to the PostgreSQL server
        print('Connecting to the PostgreSQL database...')
        conn = psycopg.connect(**params)

        # create a cursor
        cur = conn.cursor()

        # execute a statement
        print('PostgreSQL database version:')
        cur.execute('SELECT version()')

        # display the PostgreSQL database server version
        db_version = cur.fetchone()
        print(db_version)

        # close the communication with the PostgreSQL
        cur.close()
    except (Exception, psycopg.DatabaseError) as error:
        print(error)
    finally:
        if conn is not None:
            conn.close()
            print('Database connection closed.')


if __name__ == '__main__':
    connect()

2/17
self.cur.execute('''
    		            CREATE TABLE flights (
    		        	flight text primary key,
    		        	departure text,
    		        	arrival text,
    		        	departuretime time,
    		        	arrivaltime time,
    		        	schedule int,
    		        	price int,
    		        	days int
    		           )
                  ''')
        # Insert DataFrame to Table
        for row in self.data.itertuples():
            self.cur.execute(
                row.flight,
                row.departure,
                row.arrival,
                row.departuretime,
                row.arrivaltime,
                row.schedule,
                row.price,
                row.days
            )
        self.conn.commit()